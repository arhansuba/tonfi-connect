#pragma version ^0.4.1;

#include "./Constants.fc";
#include "./Math.fc";

;; Constants
const int MAX_UINT128 = 340282366920938463463374607431768211455;
const int TIMELOCK_DELAY = 86400;
const int MAX_RETRIES = 3;
const int COOLDOWN_PERIOD = 3600;

;; Error codes
const int error_unauthorized = 101;
const int error_invalid_sig = 102;
const int error_paused = 103;
const int error_timelock = 104;
const int error_invalid_nonce = 105;
const int error_rate_limit = 106;
const int error_reentrancy = 107;

;; Storage variables
global slice owner;
global slice guardian;
global int last_action;
global int nonce;
global int paused;
global cell rate_limits;
global cell operations;
global cell blacklist;
global int entered;

() load_data() impure {
    slice ds = get_data().begin_parse();
    owner = ds~load_msg_addr();
    guardian = ds~load_msg_addr();
    last_action = ds~load_uint(64);
    nonce = ds~load_uint(32);
    paused = ds~load_uint(1);
    rate_limits = ds~load_dict();
    operations = ds~load_dict();
    blacklist = ds~load_dict();
    entered = ds~load_uint(1);
}

() save_data() impure {
    set_data(begin_cell()
        .store_slice(owner)
        .store_slice(guardian)
        .store_uint(last_action, 64)
        .store_uint(nonce, 32)
        .store_uint(paused, 1)
        .store_dict(rate_limits)
        .store_dict(operations)
        .store_dict(blacklist)
        .store_uint(entered, 1)
        .end_cell());
}

() check_owner() impure inline {
    slice sender = get_sender();
    throw_unless(error_unauthorized, equal_slices(sender, owner));
}

() check_not_paused() impure inline {
    throw_if(error_paused, paused != 0);
}

() prevent_reentrancy() impure inline {
    throw_if(error_reentrancy, entered != 0);
    entered = 1;
}

() check_rate_limit(int operation) impure {
    (cell limits, int found) = rate_limits.udict_get?(32, operation);
    if (found) {
        slice ls = limits.begin_parse();
        int limit = ls~load_uint(32);
        int count = ls~load_uint(32);
        int last_time = ls~load_uint(64);
        
        if ((now() - last_time) < COOLDOWN_PERIOD) {
            throw_if(error_rate_limit, count >= limit);
            count += 1;
        } else {
            count = 1;
        }
        
        rate_limits~udict_set(32, operation, 
            begin_cell()
                .store_uint(limit, 32)
                .store_uint(count, 32)
                .store_uint(now(), 64)
                .end_cell());
    }
}

;; Validation functions
() validate_amount(int amount) impure inline {
    throw_if(error_invalid_nonce, amount <= 0);
    throw_if(error_invalid_nonce, amount > MAX_UINT128);
}

() validate_signature(slice msg, slice signature, slice public_key) impure inline {
    throw_unless(error_invalid_sig, check_signature(
        cell_hash(msg.end_cell()),
        signature,
        public_key
    ));
}

;; Get methods
int get_paused() method_id {
    load_data();
    return paused;
}

slice get_owner() method_id {
    load_data();
    return owner;
}

slice get_guardian() method_id {
    load_data();
    return guardian;
}