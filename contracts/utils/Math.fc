#pragma version ^0.4.1;

;; Safe math operations for DeFi applications
(int) safe_add(int a, int b) inline {
    int c = a + b;
    throw_unless(101, c >= a);
    return c;
}

(int) safe_sub(int a, int b) inline {
    throw_unless(101, a >= b);
    return a - b;
}



(int) safe_div(int a, int b) inline {
    throw_unless(101, b != 0);
    return a / b;
}

;; DeFi specific math operations




(int) sqrt(int x) inline {
    if (x == 0) { return 0; }
    int z = (x + 1) / 2;
    int y = x;
    while (z < y) {
        y = z;
        z = (x / z + z) / 2;
    }
    return y;
}

;; Percentage and fee calculations 
(int) calculate_percentage(int value, int percentage, int base) inline {
    return muldiv(value, percentage, base);
}

(int) calculate_fee(int amount, int fee_numerator, int fee_denominator) inline {
    return muldiv(amount, fee_numerator, fee_denominator);
}