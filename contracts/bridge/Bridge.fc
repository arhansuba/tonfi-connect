#pragma version ^0.4.1;
#include "../imports/stdlib.fc";
#include "../utils/Constants.fc"; ;; Include constants

;; Storage Variables
global cell validators;      
global cell locked_tokens;    
global int min_validators;     
global cell processed_txs;    
global slice owner;         

;; Helper function to get sender address
slice get_sender() inline {
    slice cs = in_msg_full.begin_parse(); ;; Use in_msg_full instead of get_current_slice
    cs~skip_bits(4);
    return cs~load_msg_addr();
}

;; Helper function to compare slices
int equal_slices(slice s1, slice s2) inline {
    return slice_hash(s1) == slice_hash(s2);
}

() load_data() impure {
    slice ds = get_data().begin_parse();
    validators = ds~load_dict();
    locked_tokens = ds~load_dict();
    min_validators = ds~load_uint(8);
    processed_txs = ds~load_dict();
    owner = ds~load_msg_addr();
}

() save_data() impure {
    set_data(begin_cell()
        .store_dict(validators)
        .store_dict(locked_tokens)
        .store_uint(min_validators, 8)
        .store_dict(processed_txs)
        .store_slice(owner)
        .end_cell());
}

int check_validator(slice addr) inline {
    (slice value, int found) = validators.udict_get?(267, slice_hash(addr));
    return found;
}

int is_processed(int tx_hash) inline {
    (slice value, int found) = processed_txs.udict_get?(256, tx_hash);
    return found;
}

() handle_lock(slice msg) impure {
    int amount = msg~load_coins();
    int target_chain = msg~load_uint(32);
    slice recipient = msg~load_msg_addr();
    slice token = msg~load_msg_addr();
    
    ;; Fixed chain comparison with proper constants and type checks
    int is_valid_chain = (target_chain == CHAIN_ETH) | (target_chain == CHAIN_BSC);
    ;;throw_if(error::invalid_chain, ~ is_valid_chain);
    throw_if(error::invalid_chain, ((target_chain != CHAIN_TON) & (target_chain != CHAIN_ETH)))
    throw_if(error::insufficient_amount, amount < MIN_BRIDGE_AMOUNT);
    
    ;; Store token data
    cell token_data = begin_cell()
        .store_coins(amount)
        .store_slice(recipient)
        .store_uint(target_chain, 32)
        .end_cell();
    
    locked_tokens~udict_set(267, slice_hash(token), token_data.begin_parse());
}

() handle_unlock(slice msg) impure {
    int tx_hash = msg~load_uint(256);
    throw_if(error::already_processed, is_processed(tx_hash));
    
    slice token = msg~load_msg_addr();
    slice recipient = msg~load_msg_addr();
    int amount = msg~load_coins();
    cell sigs = msg~load_ref();
    
    ;; Verify signatures
    int valid_sigs = 0;
    slice ss = sigs.begin_parse();
    
    while (ss.slice_bits() >= 267) {
        slice validator = ss~load_msg_addr();
        slice sig = ss~load_ref().begin_parse();
        if (check_validator(validator)) {
            valid_sigs += 1;
        }
    }
    
    throw_if(error::insufficient_validators, valid_sigs < min_validators);
    
    ;; Store processed transaction
    processed_txs~udict_set(256, tx_hash, 
        begin_cell().store_uint(now(), 64).end_cell().begin_parse());
    
    ;; Send tokens
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(token)
        .store_coins(0)
        .store_uint(0, 107)
        .store_uint(op::unlock, 32)
        .store_coins(amount)
        .store_slice(recipient)
        .end_cell(), 64);
}

;; Get methods
(int) get_locked_amount(slice addr) method_id {
    load_data();
    (slice value, int found) = locked_tokens.udict_get?(267, slice_hash(addr));
    if (found) {
        return value~load_coins();
    }
    return 0;
}

(int) get_validator_count() method_id {
    load_data();
    int count = 0;
    (_, _, int f) = validators.udict_get_min?(267);
    while (f) {
        count += 1;
        (_, _, f) = validators.udict_get_next?(267, f);
    }
    return count;
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { return (); }
    
    
    slice cs = in_msg_full.begin_parse();
    cs~skip_bits(4);
    slice sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    
    load_data();
    
    if (op == op::lock) {
        handle_lock(in_msg_body);
    } elseif (op == op::unlock) {
        handle_unlock(in_msg_body);
    }
    
    save_data();
}