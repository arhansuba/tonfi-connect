#pragma version ^0.4.1;

;; Storage Variables
global cell validators;      
global cell locked_tokens;    
global int min_validators;     
global cell processed_txs;    
global slice owner;         

;; Chain IDs
const int CHAIN_TON = 1;
const int CHAIN_ETH = 2;
const int CHAIN_BSC = 3;

;; Error codes
const int error_unauthorized = 301;
const int error_invalid_signature = 302;
const int error_insufficient_validators = 303;
const int error_already_processed = 304;
const int error_insufficient_amount = 305;
const int error_invalid_chain = 306;

;; Operation codes
const int op_lock = 1;
const int op_unlock = 2;
const int op_add_validator = 3;
const int op_remove_validator = 4;
const int op_set_min_validators = 5;
const int op_verify = 6;

() load_data() impure {
    slice ds = get_data().begin_parse();
    validators = ds~load_dict();
    locked_tokens = ds~load_dict();
    min_validators = ds~load_uint(8);
    processed_txs = ds~load_dict();
    owner = ds~load_msg_addr();
}

() save_data() impure {
    set_data(begin_cell()
        .store_dict(validators)
        .store_dict(locked_tokens)
        .store_uint(min_validators, 8)
        .store_dict(processed_txs)
        .store_slice(owner)
        .end_cell());
}

int check_validator(slice addr) inline {
    (_, int found) = validators.udict_get?(267, slice_hash(addr));
    return found;
}

int is_processed(int tx_hash) inline {
    (_, int found) = processed_txs.udict_get?(256, tx_hash);
    return found;
}

() handle_lock(slice msg) impure {
    int amount = msg~load_coins();
    int target_chain = msg~load_uint(32);
    slice recipient = msg~load_msg_addr();
    slice token = msg~load_msg_addr();
    
    ;; Verify chain ID and amount
    throw_if(error_invalid_chain, (target_chain != CHAIN_ETH) & (target_chain != CHAIN_BSC));
    throw_if(error_insufficient_amount, amount < 1000000000); ;; Min 1 TON
    
    ;; Lock tokens
    locked_tokens~udict_set(267, 
        slice_hash(token),
        begin_cell()
            .store_coins(amount)
            .store_slice(recipient)
            .store_uint(target_chain, 32)
            .end_cell());
}

() handle_unlock(slice msg) impure {
    int tx_hash = msg~load_uint(256);
    throw_if(error_already_processed, is_processed(tx_hash));
    
    slice token = msg~load_msg_addr();
    slice recipient = msg~load_msg_addr();
    int amount = msg~load_coins();
    cell sigs = msg~load_ref();
    
    ;; Verify signatures
    int valid_sigs = 0;
    slice ss = sigs.begin_parse();
    
    while (ss.slice_bits() >= 267) {
        slice validator = ss~load_msg_addr();
        cell sig = ss~load_ref();
        if (check_validator(validator)) {
            valid_sigs += 1;
        }
    }
    
    throw_if(error_insufficient_validators, valid_sigs < min_validators);
    
    ;; Process unlock
    processed_txs~udict_set(256, tx_hash, 
        begin_cell().store_uint(now(), 64).end_cell());
    
    ;; Send tokens
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(token)
        .store_coins(0)
        .store_uint(0, 107)  ;; default flags
        .store_uint(op_unlock, 32)
        .store_coins(amount)
        .store_slice(recipient)
        .end_cell(), 64);
}

;; Get methods
int get_locked_amount(slice addr) method_id {
    load_data();
    (cell data, int found) = locked_tokens.udict_get?(267, slice_hash(addr));
    if (found) {
        return data.begin_parse().preload_coins();
    }
    return 0;
}

int get_validator_count() method_id {
    load_data();
    int count = 0;
    (_, _, int f) = validators.udict_get_min?(267);
    while (f) {
        count += 1;
        (_, _, f) = validators.udict_get_next?(267, f);
    }
    return count;
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { return (); }
    
    slice cs = in_msg_full.begin_parse();
    cs~load_uint(4);
    slice sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    
    load_data();
    
    if (op == op_lock) {
        handle_lock(in_msg_body);
    } elseif (op == op_unlock) {
        handle_unlock(in_msg_body);
    }
    
    save_data();
}