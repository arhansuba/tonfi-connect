#pragma version ^0.4.1;

;; Storage Variables
global cell pools_dict;  
global cell tokens_dict;
const int WTON_ID = 0;

;; Error codes
const int error_pool_not_found = 201;
const int error_invalid_path = 202;
const int error_insufficient_output = 203;
const int error_no_path = 204;

;; Operation codes
const int op_swap = 1;
const int op_swap_exact = 2;
const int op_add_pool = 3;
const int op_remove_pool = 4;

() load_data() impure {
    slice ds = get_data().begin_parse();
    pools_dict = ds~load_dict();
    tokens_dict = ds~load_dict();
}

() save_data() impure {
    set_data(begin_cell()
        .store_dict(pools_dict)
        .store_dict(tokens_dict)
        .end_cell());
}

slice get_pool_addr(int token0, int token1) inline {
    int key = (min(token0, token1) << 128) | max(token0, token1);
    (slice addr, int found) = pools_dict.udict_get?(256, key);
    throw_unless(error_pool_not_found, found);
    return addr;
}

;; Path finding
(int, cell) calc_direct_swap(int token_in, int token_out, int amount) inline {
    slice pool = get_pool_addr(token_in, token_out);
    
    ;; Get reserves from pool
    (int reserve_in, int reserve_out) = get_reserves(pool, token_in, token_out);
    
    ;; Calculate output
    int out_amount = calc_out_amount(amount, reserve_in, reserve_out);
    
    cell path = begin_cell()
        .store_uint(token_in, 32) 
        .store_uint(token_out, 32)
        .store_slice(pool)
        .end_cell();
        
    return (out_amount, path);
}

(int, cell) calc_wton_path(int token_in, int token_out, int amount) inline {
    if ((token_in == WTON_ID) | (token_out == WTON_ID)) {
        return (0, null());
    }
    
    ;; Get pools
    slice pool1 = get_pool_addr(token_in, WTON_ID);
    slice pool2 = get_pool_addr(WTON_ID, token_out);
    
    ;; Swap calculations
    (int r1_in, int r1_out) = get_reserves(pool1, token_in, WTON_ID);
    int wton_amount = calc_out_amount(amount, r1_in, r1_out);
    
    (int r2_in, int r2_out) = get_reserves(pool2, WTON_ID, token_out);
    int out_amount = calc_out_amount(wton_amount, r2_in, r2_out);
    
    cell path = begin_cell()
        .store_uint(token_in, 32)
        .store_uint(WTON_ID, 32)
        .store_slice(pool1)
        .store_uint(token_out, 32)
        .store_slice(pool2)
        .end_cell();
        
    return (out_amount, path);
}

() execute_swap(slice msg, cell path) impure {
    int amount = msg~load_coins();
    int min_out = msg~load_coins();
    slice sender = msg~load_msg_addr();
    
    slice ps = path.begin_parse();
    while (ps.slice_bits() > 0) {
        int token_in = ps~load_uint(32);
        int token_out = ps~load_uint(32);
        slice pool = ps~load_msg_addr();
        
        ;; Send swap to pool
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(pool)
            .store_coins(amount)
            .store_uint(0, 107)
            .store_uint(op_swap, 32)
            .store_uint(token_in, 32)
            .store_uint(token_out, 32)
            .store_slice(sender)
            .end_cell(), 64);
    }
}

;; Get methods
cell find_best_path(int token_in, int token_out, int amount) method_id {
    load_data();
    
    ;; Compare direct vs WTON path
    (int direct_out, cell direct_path) = calc_direct_swap(token_in, token_out, amount);
    (int wton_out, cell wton_path) = calc_wton_path(token_in, token_out, amount);
    
    if (direct_out >= wton_out) {
        return direct_path;
    } else {
        return wton_path;
    }
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { return (); }
    
    slice cs = in_msg_full.begin_parse();
    cs~load_uint(4);
    slice sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    
    load_data();
    
    if (op == op_swap) {
        cell path = find_best_path(msg~load_uint(32), msg~load_uint(32), msg~load_coins());
        execute_swap(msg, path);
    }
    
    save_data();
}